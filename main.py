"""
main.py - Streamlit App Main File

LOGIC CH√çNH:
1. Cache d·ªØ li·ªáu v√† models ƒë·ªÉ t·ªëi ∆∞u performance
2. Giao di·ªán filter: m√¥n h·ªçc, nƒÉm, ƒë·ªô kh√≥, CH∆Ø∆†NG (topic)
3. Hi·ªÉn th·ªã c√¢u h·ªèi ng·∫´u nhi√™n v√† x·ª≠ l√Ω ƒë√°p √°n
4. Hi·ªÉn th·ªã c√¢u h·ªèi t∆∞∆°ng t·ª± sau khi tr·∫£ l·ªùi
5. Theo d√µi ƒëi·ªÉm s·ªë ng∆∞·ªùi d√πng

FLOW:
- Load data ‚Üí Initialize models ‚Üí Initialize topic classifier ‚Üí Create filters ‚Üí Display question ‚Üí Check answer ‚Üí Show similar

NEW FEATURE: Topic Classification
- Ph√¢n lo·∫°i ch·ªß ƒë·ªÅ c√¢u h·ªèi theo ch∆∞∆°ng s·ª≠ d·ª•ng BERT/PhoBERT
- Filter theo ch∆∞∆°ng: VD Physics ‚Üí "Dao ƒë·ªông c∆°", "ƒêi·ªán xoay chi·ªÅu"
"""

import streamlit as st
from utils import load_vnhsge_data, get_random_question, check_answer, ScoreTracker
from models import initialize_models
from topic_classifier import initialize_topic_classifier
import warnings
warnings.filterwarnings('ignore')

def create_streamlit_app():
    """T·∫°o giao di·ªán Streamlit"""
    
    st.title("H·ªá th·ªëng tr·∫Øc nghi·ªám")
    st.write("VNHSGE ƒë·ªÅ thi THPT Qu·ªëc gia g·ªìm 3 m√¥n (L√Ω-H√≥a-Sinh) (2019~2023)")
    
    # Initialize session state - ch·ªâ load m·ªôt l·∫ßn
    if 'data' not in st.session_state:
        raw_data = load_vnhsge_data()
        
        # Initialize difficulty classifier v√† similar finder
        difficulty_classifier, difficulties, similar_finder = initialize_models(raw_data)
        
        # Initialize topic classifier
        topic_classifier, topics = initialize_topic_classifier(raw_data)
        
        # Th√™m difficulty v√† topic columns v√†o data
        data_enhanced = raw_data.copy()
        data_enhanced['difficulty'] = difficulties
        data_enhanced['topic'] = topics
        
        st.session_state.data = data_enhanced
        st.session_state.similar_finder = similar_finder
        st.session_state.topic_classifier = topic_classifier
        st.session_state.score_tracker = ScoreTracker()
        st.session_state.current_question = None
        st.session_state.show_similar = False
    
    # Filter options
    subject_options = {
        'Sinh h·ªçc': 'biology',
        'H√≥a h·ªçc': 'chemistry', 
        'V·∫≠t l√Ω': 'physics'
    }
    
    year_options = {
        'T·∫•t c·∫£ c√°c nƒÉm': None,
        '2019': 2019, '2020': 2020, '2021': 2021, '2022': 2022, '2023': 2023
    }
    
    difficulty_options = {
        'T·∫•t c·∫£ m·ª©c ƒë·ªô': None,
        'D·ªÖ': 'easy', 'Trung b√¨nh': 'medium', 'Kh√≥': 'hard'
    }
    
    # UI Filters
    selected_subject = st.selectbox("Ch·ªçn m√¥n h·ªçc:", list(subject_options.keys()))
    selected_year = st.selectbox("Ch·ªçn ƒë·ªÅ theo nƒÉm:", list(year_options.keys()))
    selected_difficulty = st.selectbox("Ch·ªçn m·ª©c ƒë·ªô c√¢u h·ªèi:", list(difficulty_options.keys()))
    
    # Get filter values
    subject_code = subject_options[selected_subject]
    year_code = year_options[selected_year]
    difficulty_code = difficulty_options[selected_difficulty]
    
    # Topic filter (NEW)
    available_topics = st.session_state.topic_classifier.get_topics_by_subject(subject_code)
    topic_options = ['T·∫•t c·∫£ ch∆∞∆°ng'] + available_topics
    selected_topic = st.selectbox("Ch·ªçn ch∆∞∆°ng:", topic_options)
    topic_code = None if selected_topic == 'T·∫•t c·∫£ ch∆∞∆°ng' else selected_topic
    
    # New question button
    if st.button("C√¢u h·ªèi m·ªõi"):
        st.session_state.current_question = get_random_question(
            st.session_state.data, subject_code, year_code, difficulty_code, topic_code
        )
        st.session_state.show_similar = False
    
    # Display current question
    if st.session_state.current_question is not None:
        question = st.session_state.current_question
        
        st.write("**C√¢u h·ªèi:**")
        st.write(question['question'])
        
        st.write("**C√°c ƒë√°p √°n:**")
        for option in question['options']:
            st.write(option)
        
        # Answer input
        user_answer = st.radio("Ch·ªçn ƒë√°p √°n:", ['A', 'B', 'C', 'D'])
        
        # Submit answer
        if st.button("G·ª≠i ƒë√°p √°n"):
            is_correct = check_answer(user_answer, question['answer'])
            st.session_state.score_tracker.add_result(is_correct)
            
            if is_correct:
                st.success("ƒê√∫ng!")
            else:
                st.error(f"Sai! ƒê√°p √°n ƒë√∫ng l√†: {question['answer']}")
            
            if question['explanation']:
                explanation = question['explanation'].replace('\\n', '\n')
                st.info(f"Gi·∫£i th√≠ch:\n{explanation}")
            
            st.session_state.show_similar = True
        
        # Similar questions
        if st.session_state.show_similar:
            similar_questions = st.session_state.similar_finder.find_similar_questions(
                question['id'], n_similar=3
            )
            
            if similar_questions:
                st.write("---")
                st.write("**üí° C√¢u h·ªèi t∆∞∆°ng t·ª± ƒë·ªÉ luy·ªán t·∫≠p:**")
                
                for i, similar in enumerate(similar_questions, 1):
                    similar_q = similar['question_data']
                    similarity_score = similar['similarity']
                    
                    with st.expander(f"C√¢u {i}: {similar_q['question'][:60]}... (ƒê·ªô t∆∞∆°ng ƒë·ªìng: {similarity_score:.2f})"):
                        st.write("**C√¢u h·ªèi:**")
                        st.write(similar_q['question'])
                        
                        st.write("**C√°c ƒë√°p √°n:**")
                        for option in similar_q['options']:
                            st.write(option)
                        
                        if st.button(f"L√†m b√†i n√†y", key=f"do_question_{i}"):
                            st.session_state.current_question = similar_q
                            st.session_state.show_similar = False
                            st.rerun()
        
        # Score display
        st.write("---")
        st.write(f"**ƒêi·ªÉm s·ªë:** {st.session_state.score_tracker.correct}/{st.session_state.score_tracker.total}")
        st.write(f"**ƒê·ªô ch√≠nh x√°c:** {st.session_state.score_tracker.get_accuracy():.1f}%")
    
    else:
        st.write("Nh·∫•n 'C√¢u h·ªèi m·ªõi' ƒë·ªÉ b·∫Øt ƒë·∫ßu!")

if __name__ == "__main__":
    create_streamlit_app()